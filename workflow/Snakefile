# copyright 2022 nicholas.waglechner@sinaihealth.ca
import sys
import os
import pandas as pd
import glob

print(sys.argv)
# add to command line to be explicit --configfile: ./config/config.yaml"
if len(config) == 0:
    exit('no configfile specified: use --configfile [file]')
else:
    config_path = sys.argv[sys.argv.index('--configfile') + 1]
    print(f"using config: {config_path}", file=sys.stderr)

container: "docker://continuumio/miniconda3:4.9.2"

"""
from https://snakemake.readthedocs.io/en/v5.22.1/snakefiles/configuration.html#validation
""" # noqa
# validate(config, "config.schema.yaml")
# validate(samples, "samples.schema.yaml")

# TODO -- from
"""
https://charlesreid1.github.io/building-snakemake-command-line-wrappers-for-workflows.html
""" # noqa

exec_dir = os.getcwd()
res = config['results_dir']

include: "common.smk"

samples = get_samples()
sample_names = samples.keys()
# TODO this is kind of lazy, and could use some more checks to ensure there are
# paired R1 and R2 for each sample
short_sample_names = [n for n in sample_names if len(samples[n]['MISEQ']['R1']) > 0]
long_sample_names = [n for n in sample_names if len(samples[n]['MINION']) > 0]
short_only_sample_names = [
    n for n in short_sample_names if n not in long_sample_names
]
long_only_sample_names = [
    n for n in long_sample_names if n not in short_sample_names
]
both_samples = [
    n for n in sample_names if 
    n in short_sample_names and 
    n in long_sample_names
]
# sample_names = list(sample_names)[:20]
print("short samples:", short_sample_names, file=sys.stderr)
print("short only samples:", short_only_sample_names, file=sys.stderr)
print("long samples:", long_sample_names, file=sys.stderr)
print("long only samples:", long_only_sample_names, file=sys.stderr)
print("both sample names:", both_samples, file=sys.stderr)

filt_short_samples = list(short_sample_names)
filtered_short_samples = config['exclude_short_samples']
for name in filtered_short_samples:
    try:
        filt_short_samples.remove(name)
    except Exception as e:
        print(
            f"SHORT - tried to_exclude {name}, not found in sample_sheet",
            file=sys.stderr
        )
filt_long_samples = list(long_sample_names)
filtered_long_samples = config['exclude_long_samples']
for name in filtered_long_samples:
    try:
        filt_long_samples.remove(name)
    except Exception as e:
        print(
            f"LONG - tried to exclude {name}, not found in sample_sheet",
            file=sys.stderr
        )
print('Including {} isolates (from original {} isolates)'.format(
    len(filt_short_samples + filt_long_samples), 
    len(short_sample_names + long_sample_names)
))

# medaka parsing to turn off
if config['dflye_medaka'] < 1:
    config['_DFLYE_MEDAKA'] = ""
else:
    config['_DFLYE_MEDAKA'] = f" --medaka {config['dflye_medaka']} " \
        f"--model {config['dflye_medaka_model']} " \
        f"--medaka_opts \'{config['dflye_medaka_opts']}\' "

# external data rules + GATK initialization
include: "stage0.smk"

# Illumina-QC pipeline
include: "stage1.smk"
# # variant calling
include: "stage2.smk"
include: "stage3.smk"
# include: "SNP_counts.smk"

rule all:
# Rule "all" default catches output of other rules as input in order to
# simplify running the workflow

rule stage1:
    input:
        ###############
        # STAGE 1 - QC
        ###############
        rules.stage1_all_outputs.input
